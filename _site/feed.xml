<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2025-01-24T13:47:06+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">tŏmōhulk</title><subtitle>Father, Husband, Metal Head, Homebrewer</subtitle><entry><title type="html">ConvertFrom-AppLockerPolicyXml</title><link href="http://0.0.0.0:4000/convertfrom-applockerpolicyxml/" rel="alternate" type="text/html" title="ConvertFrom-AppLockerPolicyXml" /><published>2021-03-02T00:00:00+00:00</published><updated>2021-03-02T00:00:00+00:00</updated><id>http://0.0.0.0:4000/convertfrom-applockerpolicyxml</id><content type="html" xml:base="http://0.0.0.0:4000/convertfrom-applockerpolicyxml/"><![CDATA[<p>Hey-Oh!  Its been a while!  Even though I’ve been locked at home for the past year, I haven’t published any new content in forever.  Well, life has been pretty boring so I haven’t come across much worth sharing, and I’m also lazy.  But I do have something today finally worth blerg’n about.  So anyway, away we go!</p>

<p>So, in my not so distant past, I was rolling out Windows AppLocker to our organization, I did get it out to most sites, but other stuff came up, other projects, yada yada yada, and I never got it all the way finished.  Now, its back on the todo list, and one of my peers is working on finishing it up.  Anyway, I am assisting with the KB transfer, and I’m also helping to troubleshoot issues that come up as he moves forward.  Well a few days back I was helping him out, and I was on the users computer, who was having a program being blocked that should not have been.  It was based on a recent exception we had made, so I wanted to verify the new policy was in fact being applied from within the GPO.  So, I started using the AppLocker PowerShell cmdlets.  Long story short, what a disappointment those are.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-Command</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="s2">"*AppLocker*"</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        Get-AppLockerFileInformation                       1.0        AppLocker
Function        Get-AppLockerPolicy                                1.0        AppLocker
Function        New-AppLockerPolicy                                1.0        AppLocker
Function        Set-AppLockerPolicy                                1.0        AppLocker
Function        Test-AppLockerPolicy                               1.0        AppLocker
</code></pre></div></div>

<p>Wow, a lot to choose from there right.  Also I think <a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/applocker-overview">AppLocker</a> came out with Windows 7, SP1 maybe, and these are still v1……anyway.  I was pretty sure the <code class="language-plaintext highlighter-rouge">Get-AppLockerPolicy</code> cmdlet is going to be the one I want, so I can see exactly what rules are being applied.  So, I did the obvious thing right?  <em>wink wink</em>.  I ran <code class="language-plaintext highlighter-rouge">Get-Help</code> and checked out the Syntax”:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-Help</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">Get-AppLockerPolicy</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SYNTAX
    Get-AppLockerPolicy -Local [-Xml] [&lt;CommonParameters&gt;]

    Get-AppLockerPolicy -Domain -Ldap &lt;string&gt; [-Xml] [&lt;CommonParameters&gt;]

    Get-AppLockerPolicy -Effective [-Xml] [&lt;CommonParameters&gt;]
</code></pre></div></div>

<p>Ok, so it looks like you can either get the Domain or Local policy, or the Effective policy, which would be the combination of both I would guess.  So lets do that and see what is actually being applied.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RunspaceId          : a3c075e3-c5c8-4120-8f37-b69d9deb38af
Version             : 1
RuleCollections     : {Microsoft.Security.ApplicationId.PolicyManagement.PolicyModel.FilePublisherRule, ,
                      Microsoft.Security.ApplicationId.PolicyManagement.PolicyModel.FilePublisherRule
                      Microsoft.Security.ApplicationId.PolicyManagement.PolicyModel.FilePublisherRule
                      Microsoft.Security.ApplicationId.PolicyManagement.PolicyModel.FilePublisherRule
                      Microsoft.Security.ApplicationId.PolicyManagement.PolicyModel.FilePublisherRule
                      Microsoft.Security.ApplicationId.PolicyManagement.PolicyModel.FileHashRule…}
RuleCollectionTypes : {Appx, Dll, Exe, Msi…}
</code></pre></div></div>

<p>So wow, thats great info there, looks like all the conditions are in the <code class="language-plaintext highlighter-rouge">RuleCollections</code> property, lets dig in and see what info is in there.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">RuleCollections</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-First</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nt">-Property</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Capacity       : 4
Count          : 1
IsFixedSize    : False
IsReadOnly     : False
IsSynchronized : False
SyncRoot       : {Microsoft.Security.ApplicationId.PolicyManagement.PolicyModel.FilePublisherRule}
</code></pre></div></div>

<p>So, nothing, like literally nothing…am I missing something?  Maybe in SyncRoot?</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">RuleCollections</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-First</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">SyncRoot</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-Property</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Length
------
    79
</code></pre></div></div>

<p><em>Length 79</em>?  So all this is doing is just giving me a string?  And the <em>value</em> of that string is just the object type name?  Like WTF is going on?  So then I tried diving into that other property, the <code class="language-plaintext highlighter-rouge">RuleCollectionTypes</code> maybe?  Seems like a long shot for sure:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">RuleCollectionTypes</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Appx
Dll
Exe
Msi
</code></pre></div></div>

<p>JFC!  Where are the RULES!  <em>Insert Batman meme here…GIVE EM TO ME!</em>  I guess lets try that <code class="language-plaintext highlighter-rouge">-Xml</code> parameter, I mean, what other options are there…(see help output above, there are none):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="nt">-Xml</span><span class="w">
</span></code></pre></div></div>

<p>Not going to paste the out of that here, because its huge.  But its not even true <em>Xml</em>, its just a string that has all the Xml tags, so you still have to cast it to Xml yourself:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Xml</span><span class="p">](</span><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="nt">-Xml</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AppLockerPolicy
---------------
AppLockerPolicy
</code></pre></div></div>

<p>Hey, look at that, an actual true Xml object that can be manipulated like any other Xml document.  So, from what I can tell, the only <em>real option</em> you have here is to just spit out the Xml string to your clipboard and then paste it in a text editor and the use the find function to look for any rule or condition you maybe after. If you are just trying to be quick anyway.  But that still seems like the worst solution ever!  So, I decided to make a PowerShell function that would parse the Xml for you into usable, and more importantly, readable objects.  This also gave me an excuse to spend some time in the IDE, which I jumped on, as I don’t get to do that near as much as I used to.</p>

<hr />

<p>So, the <strong>TLDR</strong>: I created a cmdlet called <code class="language-plaintext highlighter-rouge">ConvertFrom-AppLockerPolicyXml</code>.  This will take in Xml generated from <code class="language-plaintext highlighter-rouge">Get-AppLockerPolicy</code> and convert it to usable objects.  It also does a few other things under the hood, such as converting the <code class="language-plaintext highlighter-rouge">UserOrGroupSid</code> property to the corresponding user or group name, it also bundles all the <code class="language-plaintext highlighter-rouge">Conditions</code> and <code class="language-plaintext highlighter-rouge">Exceptions</code> into a single properties:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="nt">-Xml</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">ConvertFrom-AppLockerPolicyXml</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Id              : bef5d95f-da42-4e68-b3bc-06f9e683891f
Name            : All My Stuff
Description     :
Type            : Exe
EnforcementMode : AuditOnly
UserOrGroup     : domain\tomohulk
Action          : Allow
Conditions      : {FilePathCondition}
Exceptions      :
</code></pre></div></div>

<p>And you can dive into the Conditions if you want or need to:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="nt">-Xml</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">ConvertFrom-AppLockerPolicyXml</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-First</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">Conditions</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ConditionType: FilePathCondition
Path: %OSDRIVE%\AllMyStuff\*
</code></pre></div></div>

<p>Mind you these are broad and very fake outputs here, but I think you get the idea.  I did use PowerShell Classes to make it easy to cast to custom objects, in my case, hundreds of rule objects.  So you need at least PowerShell 5.1.  I Did all my development and testing for this in pwsh v7.1.2.  And one other bonus from classes is I like that my <em>custom</em> (casted really) objects have valid descriptive type names:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="nt">-Xml</span><span class="w"> </span><span class="o">|</span><span class="w"> 
    </span><span class="n">ConvertFrom-AppLockerPolicyXml</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="nf">GetType</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     False    AppLockerRule                            System.Object
</code></pre></div></div>

<p>And when I say <em>casting</em> I mean it.  There really isn’t much <em>logic</em> to this.  It just iterates and then passes in the Xml nodes to the <code class="language-plaintext highlighter-rouge">AppLockerRule</code> class, and lets the class definition do all the heavy lifting and format the output.  Here is the only <em>executing code</em> really (<code class="language-plaintext highlighter-rouge">$Xml</code> being the Xml string from <code class="language-plaintext highlighter-rouge">Get-AppLockerPolicy -Xml</code>):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$fileType</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">@(</span><span class="s2">"Appx"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Dll"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Exe"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Msi"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Script"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$rules</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$Xml</span><span class="o">.</span><span class="nf">AppLockerPolicy</span><span class="o">.</span><span class="nf">SelectNodes</span><span class="p">(</span><span class="s2">"//RuleCollection[@Type='</span><span class="nv">$fileType</span><span class="s2">']"</span><span class="p">)</span><span class="w">
    </span><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$ruleType</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">@(</span><span class="s2">"FilePublisherRule"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FilePathRule"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FileHashRule"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$rule</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">@(</span><span class="nv">$rules</span><span class="err">.</span><span class="nv">$ruleType</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="p">[</span><span class="n">AppLockerRule</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span><span class="nv">$rules</span><span class="o">.</span><span class="nf">EnforcementMode</span><span class="p">,</span><span class="w"> </span><span class="nv">$rules</span><span class="o">.</span><span class="nf">Type</span><span class="p">,</span><span class="w"> </span><span class="nv">$rule</span><span class="p">)</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Cheers, and enjoy!</p>

<script src="https://gist.github.com/e92ff6e8d85862cb0e8a5b69774e38b3.js"> </script>]]></content><author><name></name></author><category term="powershell" /><category term="powershell" /><category term="windows" /><summary type="html"><![CDATA[Convert the terrible output from Get-AppLockerPolicy to something worth a damn.]]></summary></entry><entry><title type="html">Motorizing Your Grain Mill</title><link href="http://0.0.0.0:4000/motorizing-your-grain-mill/" rel="alternate" type="text/html" title="Motorizing Your Grain Mill" /><published>2019-08-21T00:00:00+00:00</published><updated>2019-08-21T00:00:00+00:00</updated><id>http://0.0.0.0:4000/motorizing-your-grain-mill</id><content type="html" xml:base="http://0.0.0.0:4000/motorizing-your-grain-mill/"><![CDATA[<p>If you are like me, and most others I know who crush their own grain, you set up is pretty simple, a mill, and either you are hand cranking it, which sounds terrible, or you hooking your drill to it, and powering it that way.  I personally am the latter, I hook my battery powered DeWalt drill to the mill and try to hold the speed slow and steady.  This is a PITA for two reasons.  First, I can never hold the speed the same for the entire crush, especially if its a rather large grain bill, and, this may not be true, but I feel like it cannot be great for my drill to run it with the trigger barely pressed for 15 minutes.  And second, I cannot multitask when im grinding.  I have to just sit there and hold the drill with one hand and add additional grains to the hopper with the other.  I feel like its just a huge waste of time.  I have seen setups where people mount a drill and set the speed buy using a zip tie to get the trigger just right.  This wasn’t going to work for me because I don’t have a spare drill laying around I can donate to something like this, as it would have no other use.  And if I’m going to buy a drill for this purpose, then I might as well just buy a motor to power this thing.  And thats what I did.</p>

<h2 id="parts-list">Parts list</h2>
<ol>
  <li><a href="https://www.amazon.com/FERRODAY-Crusher-Stainless-Homebrew-Adjustable/dp/B07CMKN4B2/ref=sr_1_3?keywords=grain+mill&amp;qid=1566772604&amp;s=gateway&amp;sr=8-3">Grain Mill</a></li>
  <li><a href="https://www.aliexpress.com/item/4000060286950.html">Motor (12V, 160RPM)</a></li>
  <li><a href="https://www.aliexpress.com/item/32366750867.html?spm=a2g0s.9042311.0.0.49844c4dQxdnus">Coupler</a></li>
  <li><a href="https://www.amazon.com/gp/product/B07GFLFTV2/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;psc=1">Power Supply</a></li>
</ol>

<p>During my <em>experimentation</em> of this project I went through 3 different power supply units before settling on this one. I mean it needed to be 12v DC so that part was obvious, but I started with a 7A, the motor wouldn’t even turn on, then went to a 10A.  This one worked, however, if it got even slightly jambed up, it would stop, and I would have to clear out the entire hopper to get it going again.  It was terrible, especially as I wanted to do this build so I could fill the hopper and let it grind and go do other things, not babysit the grinder.  After upgrading to the 20A its a beast and it has not jambed up on me not once.</p>

<h2 id="wire-it-up">Wire it up</h2>
<p>This build is extremely easy, you run in the AC wire to the +/- and ground.  Then the motor has red and black wires, its DC, so red goes to V+ and black goes goes to V-.  Now, if you read any of my other blergs, I had an extra AC Rocker switch laying around from my <a href="https://tomohulk.github.io/piless-brewpi/">BrewPiLess build</a>, so I added that to my build to make it easy to turn the grinder on and off (you can find a wiring diagram on that post, just put it on the AC input in front of the PSU).</p>

<hr />

<p>Thats pretty much it, I have this mounted up in my brew table, as you can see in the video, I secured it down with a U-bolt.  Let me know if you have any questions, but this is a pretty straight forward build out, and saves me a lot of time, and I didn’t have to sacrifice a drill.</p>

<p align="center"><iframe width="560" height="315" src="https://www.youtube.com/embed/iY3-GoD2tAE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<p>Thats it!  Pour one for me, cheers!</p>]]></content><author><name></name></author><category term="homebrewing" /><category term="homebrewing" /><category term="diy" /><summary type="html"><![CDATA[How to turn your hand powered grain mill into a motorized one.]]></summary></entry><entry><title type="html">Nobody Got Time For That</title><link href="http://0.0.0.0:4000/nobody-got-time-for-that/" rel="alternate" type="text/html" title="Nobody Got Time For That" /><published>2019-08-14T00:00:00+00:00</published><updated>2019-08-14T00:00:00+00:00</updated><id>http://0.0.0.0:4000/nobody-got-time-for-that</id><content type="html" xml:base="http://0.0.0.0:4000/nobody-got-time-for-that/"><![CDATA[<p>I have been tinkering with NEIPAs for a while now, in theory, they shouldn’t be <em>too</em> hard to make, and to get an OK one, they really aren’t.  But I wanted something better then just OK.  After about 10 attempts and lots of trial and error and even more picking the brains of the Homebrewing Slack team (Bender, if you’re reading this, this is your shout out), I think I have finally done it, I mean just absolutely nailed it!  I personally think it all really came down to the water, but also, the now more readily available Kveik yeasts out there helped me as well.  Especially <a href="https://omegayeast.com/yeast/norwegian-ales/voss-kveik">Omega Voss</a>, allowing to ferment at 90F+ you can turn beers around in 5-7 days.  And they are some of the best NEIPAs I’ve ever had, second to maybe <a href="https://www.arvonbrewingco.com">Arvon Brewing</a>.  Anyway, I wanted to share my findings and what seems to really be working for me.  The best part is that the grain and water pretty much always stay the same, and you can just tinker with hops.</p>

<h2 id="water">Water</h2>
<p>OK, so first and foremost, the water.  In all my experimentation with these HaziBois, I have found that water seems to play the most important roll in what makes the hops <em>POP</em>.  Here is my water chemistry (the report is about a year old, I am due to have it updated again):</p>
<ul>
  <li>Ca: 41</li>
  <li>Mg: 12</li>
  <li>Na: 10</li>
  <li>Cl: 16</li>
  <li>SO4: 32</li>
  <li>HCO3: 135</li>
  <li>pH: 7.6</li>
</ul>

<p>I have heard lots of people talk about Sulfate to Chloride ratios and flaked adjuncts to produce this slick, soft, or pillowy mouthfeel that is pinnacle to a NEIPA.  After my experimenting, and trial and error, the best NEIPAs I am making I am going for a 1:1:1 ration of SO4:Cl:Ca, and I would ideally like to have them all at a 150ppm range, but, without cutting my water, I cannot get the numbers that high without getting my Mg and Na too high for my comfort range.  But, I am able to get them all to 135ppm and that seems to work just fine, so that what I have been using</p>

<p>Target NEIPA Water Profile:</p>
<ul>
  <li>Ca: 150</li>
  <li>Mg: 0</li>
  <li>Na: 0</li>
  <li>Cl: 150</li>
  <li>SO4: 150</li>
  <li>HCO3: 0</li>
  <li>pH: 5.4</li>
</ul>

<p>Actual NEIPA Water Profile After Treatment:</p>
<ul>
  <li>Ca: 136</li>
  <li>Mg: 20</li>
  <li>Na: 10</li>
  <li>Cl: 134</li>
  <li>SO4: 135</li>
  <li>HCO3: 135</li>
  <li>pH: 5.4 (takes me about 4.5mL of lactic)</li>
</ul>

<p>I know I should probably cut my water with RO and get that hardness down, but to be honest, these batches are turning out so well, I don’t really feel the need to.  And thats just one more thing I would need to prep, the best part of this beer is that it is a short brew day, less steps and a super fast ferment.</p>

<h2 id="mash">Mash</h2>
<p>Grain bill:</p>
<ul>
  <li>80% base malt, I personally use Rahr 2-row, I bet a Pilsen would be great too!</li>
  <li>20% White Wheat, I use Briess.</li>
  <li>1.33lb/qt grist (this is just a personal preference i use this number for everything).</li>
</ul>

<p>Only other thing I really have to say about this is, mash high, like a stout.  I have been mashing at 156-157 for 45 minutes.  Leaving some residual sugar post ferment to help with mouthfeel and softness.  It seems to be working very well.  And to be frank, Voss Kveik is a madman, if you mash at 152, its going to finish sub 1.010, and be too dry for a NEIPA.</p>

<h2 id="boil">Boil</h2>
<p>F*** the boil, <em>Nobody Got Time For That</em>.  Just bring the wort up to boil and insert your immersion chiller and start your whirlpool pump, and kill the flame.  I do this to sanitize everything.</p>

<h2 id="whirlpool">Whirlpool</h2>
<p>So after killing the flame, I turn on my chiller for about 1-2 minutes, this will bring the wort to 190ish.  Even after killing the flame, the temperature still seems to drop pretty quick to about 182ish.  Time to hop the piss out this thing.  I have been doing a half pound whirlpool only hop.  I use 4oz Citra, 2oz Mosiac, and 2oz tuttie fruity hop of your choice, I have done Amarillo, and El Dorado, and at the time of this writing, a batch with Azzaca is in the fermenter.  The El Dorado was amazing, one of the best NEIPAs I have ever had.</p>

<p>Now, I feel like my brew house is a bit prone to clogs during a heavy whirlpool, so I generally do it slowly.  I add the Citra over about a minute, then Mosaic, then whatever I’m, using for the last happy hop.  After this the temp is usually about 179.  I start my timer for a 20 minute whirlpool and turn on a very low flame, with my banjo burner I can hold a temp to a degree or two, so I do my best to hold at 180F.  Usually by the time the 20 minutes has passed, its at 181-182.</p>

<p>After the whirlpool, chill to 100F, rack to fermenter.</p>

<h2 id="ferment">Ferment</h2>
<p>Heres the good stuff, <em>Voss is Boss</em> set your temperature controller 90, And let it roll, you could probably go hotter if you wanted, I’ve heard of people pushing Voss over the 100F mark.  I also DO NOT make a starter for a 5 gallon batch with this yeast, trying to stress it a bit for some esters.</p>

<h2 id="dry-hop">Dry Hop</h2>
<p>I do everything in 24 hour increments.  24 hours after pitch, I do a dry hop, 2oz Citra, 1oz, Mosaic, 1oz same hop I used to finish the whirlpool.  48 hours post pitch, hit with that hop dosage again, totalling one pound of hops.  By 48 hours, the primary ferment will have already completed (again <em>Voss is Boss</em>).  Let it sit for at least another 24 hours for hop utilization, but ideally I target 48 hours.  So a four day total ferment.  Next is up to you, cold crash.  Your call.  I usually do it for 24 hours just to let some hops fall out of solution, so I don’t get clogged dip tubes in my kegs.  But this is not a mandatory step.</p>

<h2 id="drink-up">Drink Up</h2>
<p>Last thing is to package and serve, do what you do here, nothing special.  I close transfer and try to carbonate and serve as soon as possible.  Fresher is better!</p>

<p><img src="/images/2019-08-14-nobody-got-time-for-that/beer.jpg" alt="Beer" /></p>

<p>Thats it, cheers!</p>]]></content><author><name></name></author><category term="homebrewing" /><category term="homebrewing" /><summary type="html"><![CDATA[45 minute mash, no boil, Kveik HaziBoi, grain to glass in 5 days.]]></summary></entry><entry><title type="html">Replace Failed Storage Pool HDD</title><link href="http://0.0.0.0:4000/replacing-failed-storage-pool-hdd/" rel="alternate" type="text/html" title="Replace Failed Storage Pool HDD" /><published>2019-08-05T00:00:00+00:00</published><updated>2019-08-05T00:00:00+00:00</updated><id>http://0.0.0.0:4000/replacing-failed-storage-pool-hdd</id><content type="html" xml:base="http://0.0.0.0:4000/replacing-failed-storage-pool-hdd/"><![CDATA[<p>In my day to day jobby, I manage multiple Hyper-V clusters, and these clusters use shared storage.  Most of the storage is a JBOD shelf with dual SAS connections to the hypervisor nodes.  Because the shelf is JBOD, Windows is the <em>brains</em> for the storage.  Enter <a href="https://docs.microsoft.com/en-us/windows-server/storage/storage-spaces/overview">Windows Storage Spaces</a>.  This is basically a Software RAID that you configure a <em>pool</em> of disks, and then you layer a VHD over that pool.  After a volume is created on the VHD, it can be used by the hosts.  These volumes can be added to <a href="https://docs.microsoft.com/en-us/windows-server/failover-clustering/failover-cluster-csvs">Cluster Shared Volumes</a> which allows the volume to move between host nodes, creating redundancy.  All the VMs hosted in the cluster, live on the CSV, making them Highly Available.</p>

<p>As hardware always does, physical disks in the pool fail.  Most of the Microsoft docs on fixing this issue are quite cumbersome to follow, and even more so, they tend to deal with <a href="https://docs.microsoft.com/en-us/windows-server/storage/storage-spaces/storage-spaces-direct-overview">Storage Spaces Direct</a>, which is not the same technology.  So I thought I would make up a quick little walk through on replacing a failed HDD in a storage pool.  I have to do this about once a month, so this is just as much for me, as it is for you.</p>

<p>In my configuration, I run Windows Server Core exclusively for Hypervisors, so we will tackling this with PowerShell, tbh, not really even sure how to do this with a GUI.</p>

<h2 id="identifying-a-failed-hdd">Identifying a failed HDD</h2>
<p>Identifying a failed HDD is pretty simple, it can be done with a simple PowerShell command:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-PhysicalDisk</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="w"> </span><span class="nx">HealthStatus</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s2">"Healthy"</span><span class="w">
</span></code></pre></div></div>

<p>This will show you any disks that have failed, I typically use a 3-way mirror on my Storage Pools, so if that number is greater then 2, then well, might as well just start over.  Anyway, if the <code class="language-plaintext highlighter-rouge">Usage</code> property of the failed disk is not marked as <em>Retired</em>, you will need to mark it as such:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-PhysicalDisk</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="w"> </span><span class="nx">HealthStatus</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s2">"Healthy"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-PhysicalDisk</span><span class="w"> </span><span class="nt">-Usage</span><span class="w"> </span><span class="nx">Retired</span><span class="w">
</span></code></pre></div></div>

<p>So, this next part tends to vary between JBOD models, but to actually <em>identify</em> the failed HDD for physical replacement, there are a few things you can do, first off, you can actually trigger the slots LED to indicate the failed drive:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># This command assumes you already completed the previous command and 'Retired' the failed disks.</span><span class="w">
</span><span class="n">Get-PhysicalDisk</span><span class="w"> </span><span class="nt">-Usage</span><span class="w"> </span><span class="nx">Retired</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Enable-PhysicalDiskIdentification</span><span class="w">
</span></code></pre></div></div>

<p>You can also get the physical <code class="language-plaintext highlighter-rouge">SlotNumber</code>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-PhysicalDisk</span><span class="w"> </span><span class="nt">-Usage</span><span class="w"> </span><span class="nx">Retired</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nx">SlotNumber</span><span class="w">
</span></code></pre></div></div>

<p>However, this number is 0 indexed so when looking at the JBOD shelf, be sure to start counting at 0.</p>

<h2 id="replacing-the-hdd">Replacing the HDD</h2>
<p>After you have identified the failed HDD and marked it as retired, you can now physically replace the drive.  In my experience, after the new drive is inserted and running <code class="language-plaintext highlighter-rouge">Get-PhysicalDisk</code> the new drive always hangs in a <code class="language-plaintext highlighter-rouge">Starting</code> Operational Status.  And because of this you cannot add it to the storage pool (notice the <code class="language-plaintext highlighter-rouge">CanPool</code> Property will be <code class="language-plaintext highlighter-rouge">False</code>).  This can be cleared up by Resetting the disk:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-PhysicalDisk</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="w"> </span><span class="nx">OperationalStatus</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s2">"Starting"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Reset-PhysicalDisk</span><span class="w">
</span></code></pre></div></div>

<p>After this is complete, running the <code class="language-plaintext highlighter-rouge">Get-PhysicalDisk</code> will show the disk is <code class="language-plaintext highlighter-rouge">Healthy</code> and the <code class="language-plaintext highlighter-rouge">CanPool</code> property will be <code class="language-plaintext highlighter-rouge">True</code>.  Now, you need to identify the Storage Pool’s Friendly Name, this can be found by running the <code class="language-plaintext highlighter-rouge">Get-StoragePool</code> command.  Once you have the Friendly Name, you can add the new disk to the pool:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Add-PhysicalDisk</span><span class="w"> </span><span class="nt">-StoragePoolFriendlyName</span><span class="w"> </span><span class="nx">MyStoragePool</span><span class="w"> </span><span class="nt">-PhysicalDisks</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">Get-PhysicalDisk</span><span class="w"> </span><span class="nt">-CanPool</span><span class="p">:</span><span class="bp">$true</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Now that the drive is replaced, go ahead and repair the virtual disk:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-VirtualDisk</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="w"> </span><span class="nx">HealthStatus</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s2">"Healthy"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Repair-VirtualDisk</span><span class="w">
</span></code></pre></div></div>
<p>This will take some time depending on how large the virtual disk is, resiliency settings, and hardware, but there will be a progress bar.  Or you can add the <code class="language-plaintext highlighter-rouge">-AsJob</code> switch to the <code class="language-plaintext highlighter-rouge">Repair-VirtualDisk</code> command and let it run in the background.  You can fetch the status with <code class="language-plaintext highlighter-rouge">Get-StorageJob</code>.</p>

<p>Be sure to disable the LED identification:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># I always just run this on against all the disks, it won't hurt anything for the ones where its not enabled.</span><span class="w">
</span><span class="n">Get-PhysicalDisk</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Disable-PhysicalDiskIdentification</span><span class="w">
</span></code></pre></div></div>

<p>After the repair is complete, the last step is to remove the failed drive from the pool.  Remember, the repair has to fully complete before removing the failed drive from the pool, else data loss will occur.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Remove-PhysicalDisk</span><span class="w"> </span><span class="nt">-StoragePoolFriendlyName</span><span class="w"> </span><span class="nx">MyStoragePool</span><span class="w"> </span><span class="nt">-PhysicalDisks</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">Get-PhysicalDisk</span><span class="w"> </span><span class="nt">-Usage</span><span class="w"> </span><span class="nx">Retired</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>And thats it, good to go!  Cheers.</p>]]></content><author><name></name></author><category term="powershell" /><category term="powershell" /><category term="windows" /><category term="server" /><summary type="html"><![CDATA[Replacing a failed hard disk drive in Windows Server Storage Spaces Storage Pool.]]></summary></entry><entry><title type="html">Installing PKI SSL Certificate on HPE iLO</title><link href="http://0.0.0.0:4000/installing-pki-ssl-certificate-on-hpe-ilo/" rel="alternate" type="text/html" title="Installing PKI SSL Certificate on HPE iLO" /><published>2019-07-25T00:00:00+00:00</published><updated>2019-07-25T00:00:00+00:00</updated><id>http://0.0.0.0:4000/installing-pki-ssl-certificate-on-hpe-ilo</id><content type="html" xml:base="http://0.0.0.0:4000/installing-pki-ssl-certificate-on-hpe-ilo/"><![CDATA[<p>I work with HPE Systems almost exclusively, and as of late I have been getting very irritated with the browser warning about the self signed SSL cert that is installed on the HPE iLO by default.</p>

<p><img src="/images/2019-07-25-installing-pki-ssl-certificate-on-hpe-ilo/security-error.png" alt="Security Error" /></p>

<p>You have to jump through a few clicky hoops and the browser remembers none of it the next time you visit the page.  So, the real solution for this, and probably something that should be done anyway, is to install a certificate issued by a corporate certificate authority.  The process for doing this isn’t very difficult, its more just cumbersome and, with HPE iLOs, its quite time consuming as well.  Anyway, I put together a script to make this much easier, I put it together fairly quickly as well, so I’m sure that there are things could be improved, but the concept is solid.</p>

<h2 id="manual-steps">Manual steps</h2>
<p>I suppose before we jump into the automation portion, as with anything that is being automated, its best we cover the manual steps for reaching our goal so we fully understand what needs to be done, and what information is needed to get it done.</p>

<p>After signing into the iLO, in the <code class="language-plaintext highlighter-rouge">Administration</code> section in the <code class="language-plaintext highlighter-rouge">Security</code> workspace, there is an <code class="language-plaintext highlighter-rouge">SSL Certificate</code> tab.  On that tab you select the <code class="language-plaintext highlighter-rouge">Customize Certificate</code> button, and from there you will get a dialog, asking for the basic information to build the <em>Certificate Signing Request</em>.</p>

<p><img src="/images/2019-07-25-installing-pki-ssl-certificate-on-hpe-ilo/default-certificate.png" alt="Default Certificate" /></p>

<p>Required values:</p>
<ul>
  <li>Country</li>
  <li>State or Province</li>
  <li>Locality or City</li>
  <li>Organization</li>
  <li>Common Name (this can be the FQDN or the short name, despite what the warning says, the short name works too.)</li>
</ul>

<p>Optional values:</p>
<ul>
  <li>Organizational Unit or Department</li>
  <li>Include the iLO IP Address in the CSR</li>
</ul>

<p>After filling these in, hit the <code class="language-plaintext highlighter-rouge">Generate Request</code> button.  Now this part is really dumb, the CSR is generating, but it takes a random amount of time (0-10 minutes), with no progress control.  You just keep hitting the <code class="language-plaintext highlighter-rouge">Generate Request</code> again and again until the dialog pops up</p>

<blockquote>
  <p>The iLO subsystem is currently generating a Certificate Signing Request (CSR). This may take 10 minutes or more. In order to view the CSR, wait 10 minutes or more, and then click the “Generate CSR” button again.</p>
</blockquote>

<p>Once the dialog opens, you will need to copy the entire CSR output, including the <code class="language-plaintext highlighter-rouge">-----Begin/End Certificate Request-----</code> portions.</p>

<p><img src="/images/2019-07-25-installing-pki-ssl-certificate-on-hpe-ilo/csr-generation.png" alt="CSR-Generation" /></p>

<p>After you have the <code class="language-plaintext highlighter-rouge">CSR</code>, browse out to your CA and generate an <code class="language-plaintext highlighter-rouge">Advanced Certificate Request</code>, paste in the <code class="language-plaintext highlighter-rouge">CSR</code>, select your desired template, and submit the request.  (I’m not going into info on CAs and templates in this walk through, I’m sure either you know how to do this, else ask your PKI admin).  On the certificate download page, select the <code class="language-plaintext highlighter-rouge">BASE64</code> encoding, and download the certificate, you do not the entire chain.  Lastly, on the same screen in the iLO, you select the <code class="language-plaintext highlighter-rouge">Import Certificate</code> button, and in the dialog, you will paste your cert data.  You get this by right clicking the certificate file you generated and downloaded, and select <code class="language-plaintext highlighter-rouge">Open With -&gt; Notepad</code> and there you will get a similar result as the <code class="language-plaintext highlighter-rouge">CSR</code>, but a longer string of random characters, that is what you paste in the iLO dialog.  If this was all done correctly the iLO will reset, and you will have a custom certificate installed.  And no more security warning if you browse to it by the name you entered into the <code class="language-plaintext highlighter-rouge">Common Name</code> property.</p>

<p>Whew!  Lets automate this.</p>

<p>As you can see, there really isn’t that many steps, but I have hundreds of HPE servers, and there is no way in Hell I am going to sign into each one, generate a CSR, wait, wait, wait, then go to my CA, submit the request, save it, open it, and paste it in the web page hundreds of times.  So I started messing with the <a href="https://www.powershellgallery.com/packages/HPEiLOCmdlets/2.2.0.0">HPEiLOCmdlets</a> PowerShell Module, and using those its pretty easy to start the CSR generation, and once its created, use <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certreq_1">certreq.exe</a> to submit the request, and the <code class="language-plaintext highlighter-rouge">HPEiLOCmdlets</code> can be used to install the certificate as well.</p>

<h2 id="breaking-down-the-code">Breaking Down The Code</h2>

<p>The cmdlet I created is called <code class="language-plaintext highlighter-rouge">New-HPEiLOPKICertificate</code>  Here is the usage:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>New-HPEiLOPKICertificate.ps1 [-Credential] &lt;pscredential&gt; [-iLOName] &lt;string[]&gt; [[-Country] &lt;string&gt;] [[-State] &lt;string&gt;] [[-Locality] &lt;string&gt;] [[-Organization] &lt;string&gt;] [[-OrganizationalUnit] &lt;string&gt;] [[-CertificateAuthorityName] &lt;string&gt;] [[-CertificateTemplateName] &lt;string&gt;] [[-FirmwareMinimumVersion] &lt;version&gt;] [-IncludeiLOIP] [&lt;CommonParameters&gt;]
</code></pre></div></div>

<p>The parameters pretty much all line up with the values discribed above, with the exception of a few:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Credential</code> - This is a <code class="language-plaintext highlighter-rouge">PSCredential</code> object for the iLO login credentials, use <code class="language-plaintext highlighter-rouge">Get-Credential</code> to populate this value.</li>
  <li><code class="language-plaintext highlighter-rouge">iLOName</code> - This is the <code class="language-plaintext highlighter-rouge">CommonName</code> can be the FQDN or the shortname.</li>
  <li><code class="language-plaintext highlighter-rouge">CertificateAuthorityName</code> - This is your <code class="language-plaintext highlighter-rouge">CA</code> instance, you can find this by just typing <code class="language-plaintext highlighter-rouge">certreq</code> in <code class="language-plaintext highlighter-rouge">CMD</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">CertificateTemplateName</code> - The template to submit your <code class="language-plaintext highlighter-rouge">CSR</code> against.</li>
  <li><code class="language-plaintext highlighter-rouge">FirmwareMinimumVersion</code> - The <code class="language-plaintext highlighter-rouge">HPEiLOCmdlets</code> seem to only like newer iLO versions, I can tell you 2.55 does not work, but 2.70 does.</li>
</ul>

<p>If you want you can set default parameter values in the script, so your really only have to change the <code class="language-plaintext highlighter-rouge">iLOName</code>.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-HPEiLOPKICertifacte.ps1</span><span class="w"> </span><span class="nt">-iLOName</span><span class="w"> </span><span class="nx">myHPEiLO.tomohulk.io</span><span class="w"> </span><span class="nt">-Credential</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">Get-Credential</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The workflow of the cmdlet is pretty straight forward:</p>
<ul>
  <li>Connect to the iLO.</li>
  <li>Verify the firmware version is a minimum version.</li>
  <li>Begin the CSR generation with the supplied values.</li>
  <li>Looping every 5 seconds, query the iLO to see if the <code class="language-plaintext highlighter-rouge">CSR</code> has been generated.</li>
  <li>Export the <code class="language-plaintext highlighter-rouge">CSR</code> to a temp file.</li>
  <li>Submit the request to the the <code class="language-plaintext highlighter-rouge">CA</code> using <code class="language-plaintext highlighter-rouge">certreq.exe</code>.</li>
  <li>Use resulting <code class="language-plaintext highlighter-rouge">.pem</code> file to upload the new certificate to the iLO.</li>
  <li>Delete the temporary <code class="language-plaintext highlighter-rouge">.csr</code> and <code class="language-plaintext highlighter-rouge">.pem</code> files.</li>
</ul>

<p>This cmdlet accepts pipeline input for the <code class="language-plaintext highlighter-rouge">iLOName</code> as well as a <code class="language-plaintext highlighter-rouge">StringArray</code>, so as long as they have the same credentials, you can complete this on multiple systems at once:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@(</span><span class="s2">"ilo1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ilo2"</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">New-HPEiLOPKICertificate</span><span class="w"> </span><span class="nt">-Credential</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">Get-Credential</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="c"># or</span><span class="w">

</span><span class="n">New-HPEiLOCertificate</span><span class="w"> </span><span class="nt">-iLOName</span><span class="w"> </span><span class="s2">"ilo1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ilo2"</span><span class="w"> </span><span class="nt">-Credential</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">Get-Credential</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Thats pretty much it, after the iLO resets and you refresh the page, you will see your connection is now <em>secure</em>.</p>

<p><img src="/images/2019-07-25-installing-pki-ssl-certificate-on-hpe-ilo/secure-site.png" alt="Secure Site" /></p>

<p>Here is the complete code, cheers!:</p>

<script src="https://gist.github.com/4ddb9a0e8feb3768c742b5cf867a0cb8.js"> </script>]]></content><author><name></name></author><category term="powershell" /><category term="powershell" /><summary type="html"><![CDATA[Automating the process of creating a CSR and signing it with an Internal CA and installing it using PowerShell.]]></summary></entry><entry><title type="html">Using BLTouch with Klipper and the Ender3</title><link href="http://0.0.0.0:4000/using-bltouch-with-klipper-and-the-ender3/" rel="alternate" type="text/html" title="Using BLTouch with Klipper and the Ender3" /><published>2019-06-04T00:00:00+00:00</published><updated>2019-06-04T00:00:00+00:00</updated><id>http://0.0.0.0:4000/using-bltouch-with-klipper-and-the-ender3</id><content type="html" xml:base="http://0.0.0.0:4000/using-bltouch-with-klipper-and-the-ender3/"><![CDATA[<p>I have been 3D printing for about a year now, its had its ups and downs, good times and bad.  Some times its the greatest thing, and sometimes I’m glad I don’t keep a baseball bat near my 3D Printer, because I may not still be the owner of one if I did.  I know all printers are different and everyone has their reasons for why or what they do and use for the build surface.  I have the <a href="https://www.amazon.com/Comgrow-Creality-Ender-Aluminum-220x220x250mm/dp/B07BR3F9N6/ref=sr_1_1_sspa?keywords=ender+3&amp;qid=1559158769&amp;s=gateway&amp;sr=8-1-spons&amp;psc=1">Ender3</a>, its a great entry level printer for the price and I have spit out some amazing prints.  But one the most notorious issues with the Ender3 is the warped bed.  It seems like everyone has reported this issue.  And I think one thing all 3D Printer Hobbyist could agree on, is the first layer is one of the most important parts of the print.  And when you printing around .2mm layer hight, if the build surface isn’t perfect you’re going to have problems, especially with larger prints.</p>

<p>There are a few things you could do about this, such as, just deal with it, replace the bed with something higher grade, or add a new surface, such as a piece of glass.  I chose to use a sensor on the hot end.  I went with the <a href="https://www.amazon.com/BLTouch-Leveling-Printer-Official-Authorization/dp/B07GVCX74T/ref=sr_1_4?keywords=bltouch&amp;qid=1559158792&amp;s=gateway&amp;sr=8-4">BLTouch</a> sensor.  It’s pretty much just a probe, that will make a <em>mesh</em> of your build surface and allow for your Z axis to compensate for the imperfect surface with very small up and down Z axis movements.</p>

<p>Now, I know there is a lot of YouTube videos out there on how to setup and use a BLTouch sensor, but, everything I found when I was setting mine up, was with using the Marlin firmware. Either Vanilla Marlin or the TH3D flavor.  Well, to complicate things even more, I am using <a href="https://github.com/KevinOConnor/klipper">Klipper</a>.  I’m not going to dive into much about Klipper in this blog post, as its not really the focus.  Either you are already using Klipper and you know what it is, so keep reading, or go research Klipper and see if its for you.  Because these settings will <strong>NOT</strong> work with any flavor of the Marlin firmware.</p>

<h2 id="values-youll-need">Values You’ll Need</h2>
<p>There are values you need when setting up your BLTouch, namely the X and Y offsets from the nozzle to the BLTouch, you can either measure these or, if you are using third party mods on your hot end, a lot of the designers will specify these values.  I am using the <a href="https://www.thingiverse.com/thing:2759439">Bullseye Cooling Fan Duct</a> and the designer has provided the offset values on the Thingiverse page.  Using the Bullseye Fan Duct and the provided mount, the offsets are <code class="language-plaintext highlighter-rouge">X -42, Y -5</code>.</p>

<p>Next, you will need to know your bed size, the bed that ships with the Ender3 is <code class="language-plaintext highlighter-rouge">220x220mm</code>.  You need to know this for creating a bed mesh, which is what the BLTouch will build when probing.</p>

<h2 id="get-configuring">Get Configuring</h2>
<p>Here are the settings you need to add or update on in your Klipper <code class="language-plaintext highlighter-rouge">printer.cfg</code>:</p>
<ol>
  <li>You need to change the <code class="language-plaintext highlighter-rouge">endstop_pin</code> value to use a virtual endstop, this is in the <code class="language-plaintext highlighter-rouge">z_stepper</code> section.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">endstop_pin: probe:z_virtual_endstop</code></li>
    </ul>
  </li>
  <li>You need to allow the Z Axis to go below the ‘0’ mark for negative warp, this can be done by editing the <code class="language-plaintext highlighter-rouge">position_min</code> value, also in the <code class="language-plaintext highlighter-rouge">z_stepper</code> section.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">position_min: -3</code></li>
    </ul>
  </li>
  <li>You need to define the <code class="language-plaintext highlighter-rouge">[bltouch]</code> section and values in the configuration file (a section is defined with square brackets, this section does not exist in the Ender3 printer.cfg by default, so you will need manually create it).  You can see that the X and Y offsets are the values I got from the Thingiverse page.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[bltouch]
sensor_pin: ^PC4
control_pin: PA4
x_offset: -47.0
y_offset: -5.0
z_offset: 1.65
speed: 5.0
samples: 2
sample_retract_dist: 8.0
</code></pre></div>    </div>
    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">samples</code> value is how many times it checks each location in the bed mesh, more samples will take longer.</li>
    </ul>
  </li>
  <li>Next, the <code class="language-plaintext highlighter-rouge">[bed_mesh]</code> section needs to be manually defined.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[bed_mesh]
speed: 80
horizontal_move_z: 5
min_point: 50,30
max_point: 230,230
probe_count: 5,5
</code></pre></div>    </div>
    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">probe_count</code> is how many samples its going to take, <code class="language-plaintext highlighter-rouge">5,5</code> is a <code class="language-plaintext highlighter-rouge">5x5</code> grid, a bigger grid will take longer, but may be more accurate.</li>
      <li>The <code class="language-plaintext highlighter-rouge">min_point</code> and <code class="language-plaintext highlighter-rouge">max_point</code> is how big your bed is, with the <code class="language-plaintext highlighter-rouge">220x220mm</code> build plate, <code class="language-plaintext highlighter-rouge">230x230mm</code> is about as large as you can go.</li>
    </ul>
  </li>
  <li>Now, add the <code class="language-plaintext highlighter-rouge">[homing_override]</code> section.  You can do what ever you want here, I am just setting the Z axis to home in the middle of the bed.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[homing_override]
set_position_z:0
gcode:
 G1 Z10 F600
 G28 X Y
 G1 X166 Y120 F6000
 G28 Z
</code></pre></div>    </div>
    <ul>
      <li>PRO TIP: gcode sections in the printer.cfg need to be 4 spaced or you will get errors.</li>
    </ul>
  </li>
  <li>There is one last thing to do, and that is configure your start and end gcode sequences to tell klipper to generate the bed mesh and use it.  This command is <code class="language-plaintext highlighter-rouge">BED_MESH_CALIBRATE</code> called after <code class="language-plaintext highlighter-rouge">G28</code> (the homing override).  Now, here is what I do, I keep my start and end gcode sequences in the Klipper printer.cfg as <code class="language-plaintext highlighter-rouge">gcode_macro</code>s.  This allows me to use multiple slicers and keep my start and end gcode the same.  I have them mapped to <code class="language-plaintext highlighter-rouge">START_PRINT</code> and <code class="language-plaintext highlighter-rouge">END_PRINT</code>, then in any slicer i am using, I can just put those in and let Klipper handle the sequences.  I have included my printer.cfg at the bottom of this page so you take a look at my start up and end print gcode.</li>
</ol>

<h2 id="configure-the-z-offset">Configure The Z Offset</h2>
<p>So, for me this was the hardest part, I had the probe working, and at least stopping from crashing into the bed, but, I couldn’t figure out how to actually make the printer know the space from the probe being triggered, to the bottom of the nozzle.  Which is obviously crucial for the hotend to know how much lower to go past the point where the BLTouch is triggered and be the perfect height above the bed to start printing.  Well, its actually really simple.  At least thats how I feel about it now that I know how to do it.  And after figuring it out, the only time I have had to re-calibrate my Z offset is when I replace the nozzle.</p>

<ol>
  <li>Go into your printer.cfg and change the <code class="language-plaintext highlighter-rouge">z_offset</code> to 10 in the <code class="language-plaintext highlighter-rouge">[bltouch]</code> section.  This number is completely arbitrary.  Just need a value there, and one that will be easy to do math with later.</li>
  <li>Home the printer, <code class="language-plaintext highlighter-rouge">G28</code>.  as long as your <code class="language-plaintext highlighter-rouge">[bltouch]</code> settings are correct, the BLTouch pin should engage, and the Z axis should lower and stop, once its triggered.  I kept my finger on the power button at this point to stop the hotend from crashing into the bed if need be.</li>
  <li>Next tell the printer to go into <code class="language-plaintext highlighter-rouge">Relative Position</code> mode: <code class="language-plaintext highlighter-rouge">G91</code></li>
  <li>Now move the hotend over the spot the BLTouch probed to home the bed: <code class="language-plaintext highlighter-rouge">G1 X-47</code></li>
  <li>Get a piece of paper and get ready to bed level like you always do, lower the Z axis by -.05 until the nozzle scrapes the paper.  You can do this with the display control, or I use <a href="https://itunes.apple.com/us/app/octopod-for-octoprint/id1412557625?mt=8">OctoPod</a> on my iOS device.</li>
  <li>Once the Z axis is where it needs to be, you can run <code class="language-plaintext highlighter-rouge">GET_POSITION</code> in the terminal and then just do the math:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">[printer.cfg [bltouch] z_offset] - [z value from GET_POSITION] = z_offset</code></li>
      <li>IE: 10 - 8.5 = 1.5</li>
    </ul>
  </li>
  <li>Replace your the <code class="language-plaintext highlighter-rouge">z_offset</code> value in the <code class="language-plaintext highlighter-rouge">[bltouch]</code> section with your new calculated value.</li>
  <li>Print and be happy as your first layer runs perfect!</li>
</ol>

<p>I actually left my printer off for about 4 weeks recently, turned it on and fired off a print, first layer still layed perfect.  Cheers!</p>

<hr />

<h3 id="update">Update</h3>
<ul>
  <li>20190609 - A recent Klipper update moved the <code class="language-plaintext highlighter-rouge">samples: 2</code> and <code class="language-plaintext highlighter-rouge">sample_retract_distance: 8.0</code> from the <code class="language-plaintext highlighter-rouge">[bed_mesh]</code> section to the <code class="language-plaintext highlighter-rouge">[bltouch]</code> section.  I have updated this article to reflect those changes.</li>
</ul>

<hr />

<h3 id="my-ender3-klipper-printercfg">My Ender3 Klipper printer.cfg</h3>

<script src="https://gist.github.com/bd4955ba105b653bb81680927b4d1f87.js"> </script>]]></content><author><name></name></author><category term="3dprinting" /><category term="3dprinting" /><category term="klipper" /><summary type="html"><![CDATA[How to make your BLTouch Sensor work with the Klipper firmware and the Crealty Ender3.]]></summary></entry><entry><title type="html">Klean Yer Keezer Lines</title><link href="http://0.0.0.0:4000/klean-yer-keezer-lines/" rel="alternate" type="text/html" title="Klean Yer Keezer Lines" /><published>2019-05-09T00:00:00+00:00</published><updated>2019-05-09T00:00:00+00:00</updated><id>http://0.0.0.0:4000/klean-yer-keezer-lines</id><content type="html" xml:base="http://0.0.0.0:4000/klean-yer-keezer-lines/"><![CDATA[<p>I’m not sure out there who needs to hear this, but clean your beer lines!  After a while of beer sitting, lines begin to stain and leave flavors that will be picked up by other beers.  I mean who wants to have a lingering coffee porter in your NEIPA?  No one, thats who.  There is no <em>one size fits all</em> for how often you should clean your lines, it depends a lot on things like how long the beer has been siting in them, how often are they used, and what style of beer.  In the past, I would just replace the lines every 6 months.  There is a few things wrong with doing this, first of all, its costly, second of all, its a pain in that ass, and third, six months between cleaning/replacing is too long IMO.  Now I am rinsing lines every other month.  Maybe that is <em>too</em> often, but after you see how easy it is to do, I could do it even more often and not really mind.</p>

<h2 id="build-it">Build It</h2>
<p>So, the most important part of this build, is the pump.  The good news is, if you built a keg washer based on my last post (<a href="/cip-diy-keg-washer/">CIP DIY Keg Washer</a>), then you already have a pump that will work perfect for this.  That pump has the power to push cleaner through 4 taps, each with 10’ of beverage line.  If you have more then 4 taps, either you’ll have to do it in sections, or you <em>may</em> need a more powerful pump.</p>

<p>Here is the basic premise of this <em>line cleaner</em>, you are going to pump cleaner <em>INTO</em> <em>tap #1</em>, then connect that line to the tap line next to it, so the cleaner will be coming <em>OUT</em> <em>tap #2</em>.  Then you connect <em>tap #2</em> to <em>tap #3</em>, and again, connect <em>tap #3</em> and <em>tap #4</em> lines together, and this will cause the cleaner to come out <em>tap #4</em>, and back into the the bucket that the pump is in, allowing for the cleaner to be continuously recirculated through all taps and lines.</p>

<p><strong>TLDR</strong> Connect everything together in a way allowing for cleaner to be pumped into <em>tap #1</em> and come out <em>tap #4</em>.</p>

<p>A key component of this will be hooking beverage line to beverage line.  Which means you need a custom fitting allowing for disconnect to connect to disconnect.  If you have old kegs lying around, I guess you could steal pieces from that.  You <em>could</em> buy posts, but that would way more expensive then just replacing the lines regularly.  Im sure you already know what I did…of course, I designed something that could be 3D printed (<a href="https://www.thingiverse.com/thing:3517302">Thingiverse link</a>).</p>

<p><img src="/images/2019-05-09-klean-yer-keezer-lines/coupler.png" alt="Coupler" /></p>

<p>I’m actually pretty proud of this design, it was pretty in depth to make, and I got to learn some really interesting things with <a href="https://www.autodesk.com/products/fusion-360/overview#banner">Fustion360</a> (something similar, not designed by me, but the same concept for ball locks can be found <a href="https://www.thingiverse.com/thing:2684969">here</a>).  I printed two of these, allowing me to connect pin lock to pin lock disconnects together.</p>

<p><img src="/images/2019-05-09-klean-yer-keezer-lines/connection.jpg" alt="Connection" /></p>

<p>I had to get some rubber O-rings for them, #10 faucet O-rings from my local hardware store.  I don’t normally discuss print settings for things because there is so many variables, but one thing I will say, is print these at 100% infill as pressurized liquid will be flowing through them.  Or, if you don’t want to go the route of connecting beer lines together via the disconnects, if the barbs on your disconnects are removable, the you could remove the disconnect and use a pressure fitting to connect them.  I like the way I have it, because its also cleaning the disconnects this way.</p>

<p>Outside of those two major things, the only other parts you need is a barb to go in place of your CIP Ball on your keg washer (see previous post), some hose or tubing, I just use the same silicone tube I use when kegging, and some actual <a href="https://www.amazon.com/BLC-Beverage-System-Cleaner-32/dp/B074D9DV5P/ref=sr_1_1?keywords=BLC&amp;qid=1560991190&amp;s=gateway&amp;sr=8-1">BLC (Beer Line Cleaner)</a>.</p>

<h2 id="use-it">Use It</h2>
<p>After you have all together, the rest is easy, mix up enough BLC in a bucket to submerge your pump, run your pump into tap #1, connect tap #1 line to tap #2 line, connect tap #2 to tap #3, I just used a small piece of silicone tube for this, then connect tap #3 line to tap #4 line.  <strong>BE SURE TO OPEN ALL YOUR TAPS!</strong>  Turn the pump on and let the liquid flow though your keezers veins, and come out tap #4.  Now, my taps are close enough together I can do this with a five gallon bucket, but you may have to get creative if thats not the case for you.</p>

<p>Thats pretty much it, let that recirculate for 15-20 minutes.  Empty the bucket and fill with hot clean water, and rinse for 10 minutes.  I usually rinse for 5 minutes, empty the bucket, fill again with hot clean water, and rinse another 5.</p>

<p><img src="/images/2019-05-09-klean-yer-keezer-lines/cleaning.jpg" alt="Cleaning" /></p>

<p>Thats it.  And I’m sure the patrons of your homemade beer will have much praise to give on how fresh and clean your homebrew has become.  Cheers!</p>]]></content><author><name></name></author><category term="homebrewing" /><category term="keezer" /><category term="diy" /><category term="3dprinting" /><summary type="html"><![CDATA[How to easily clean and rinse your keezer beverage lines.]]></summary></entry><entry><title type="html">CIP DIY Keg Washer</title><link href="http://0.0.0.0:4000/cip-diy-keg-washer/" rel="alternate" type="text/html" title="CIP DIY Keg Washer" /><published>2019-05-07T00:00:00+00:00</published><updated>2019-05-07T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cip-diy-keg-washer</id><content type="html" xml:base="http://0.0.0.0:4000/cip-diy-keg-washer/"><![CDATA[<p>Ok Ok, its time for an easy build, no software, no programing, no CLI (command line interface) this one is cake, you don’t even need any tools, just some time (and money), and it will make washing your kegs easy peasy.  And, in a later post, I’ll show you how to easily turn this washer into a keezer beer line cleaner!</p>

<p>So, frankly, F washing kegs!  I mean if you are going to do it right you need to disassemble, remove the dip tube, wash, wash, rinse, rinse, blah blah.  Ain’t no one got time for that!  I’ve got a nice little build here that doesn’t break the bank and works pretty damn well.  lets get to it!</p>

<p>Ok, down to business, this really doesn’t even need a build walk through but, I’m gonna give a little one, because……the pump works great to clean your beer lines as well (post to come) so I hope you buy one.  This list going to be a little lack luster, because I bought some of it at my local hardware.  But the few things you can get online are:</p>
<ul>
  <li><a href="https://www.amazon.com/gp/product/B01CGAD986/ref=ppx_od_dt_b_asin_title_s01?ie=UTF8&amp;psc=1">Submersible Pump</a></li>
  <li><a href="https://www.amazon.com/gp/product/B073GHFP6J/ref=ppx_od_dt_b_asin_title_s00?ie=UTF8&amp;psc=1">CIP Spray Ball</a></li>
  <li><a href="https://www.amazon.com/dp/B0768ZGGMZ/ref=cm_sw_r_tw_dp_U_x_LwTcDbJ8D4Q5R">Liquid Keg Disconnect (I use pin lock)</a></li>
  <li>Some hose or tube im sure you have laying around, only need like 6”.  Size is variable as the pump comes with multiple barbs.</li>
  <li>A bucket.</li>
  <li>I used under ground sprinkler 1/2” NPT PVC (this is what I got at my locale hardware).</li>
</ul>

<p>So, this build is pretty flipping easy.  Basically, you just need a PVC tube up from the pump outlet, with the CIP Ball on top, now I added a T at the bottom, used a 6” tube, a T, and a 16” tube, and used a barb that comes with the pump and a short piece of hose to the liquid disconnect to shoot cleaner/rinse up the dip tube as well.  Then the concept is straight forward, just fill a bucket with some water and oxyclean, put your <em>keg cleaner</em> in there and shoot hot oxyclean through the keg for a while and then switch it with clean hot water and rinse!</p>

<p>Boom, a keg cleaner.  For me, I use old 7.75gal kegs as fermenters, so I use this to clean them as well.  Works really good.</p>

<p><img src="/images/2019-05-07-cip-diy-keg-washer/washer.jpg" alt="Washer" /></p>

<p>cake!  easy peasy build!  BEER TIME!</p>

<hr />

<h3 id="sources">Sources</h3>
<p>https://beer.thegremlyn.com/2017/03/15/i-built-a-keg-washer-you-should-too/</p>]]></content><author><name></name></author><category term="homebrewing" /><category term="keezer" /><category term="diy" /><summary type="html"><![CDATA[Clean your kegs, the easy way.]]></summary></entry><entry><title type="html">PiLess BrewPi</title><link href="http://0.0.0.0:4000/piless-brewpi/" rel="alternate" type="text/html" title="PiLess BrewPi" /><published>2019-05-01T00:00:00+00:00</published><updated>2019-05-01T00:00:00+00:00</updated><id>http://0.0.0.0:4000/piless-brewpi</id><content type="html" xml:base="http://0.0.0.0:4000/piless-brewpi/"><![CDATA[<p>Its no secret that temperature control is a huge aspect of brewing beer successfully.  It can have dramatic side effects if you don’t keep the temperature in the yeasts range, or you may not be able to achieve flavors that you’re seeking from the yeast fermenting at a specific temperature.  Now, in my past life as @dotps1, I covered in detail how to make a BrewPi.  A temperature controller running with a Raspberry Pi and an Arduino board (that blog post can be found <a href="https://dotps1.github.io/homebrewing/2018/01/22/brewing-your-own-brewpi.html">here</a>, for now anyway, I’m not sure how long I will be keeping https://dotps1.github.io up).  The BrewPi is defiantly a solid temperature controller solution, that allows for many customization, and the ability to create temperature profiles, allowing for temperature ramp up and cold crashing.  And most importantly, it handles temperature swing.  Unfortunately, the BrewPi is no longer officially supported on the Raspberry Pi/Arduino configuration, and as you can see the branch hasn’t been touched in years, https://github.com/BrewPi/brewpi-www/tree/legacy.  I made this clear in my last walk through, which is over a year old now, and I had to fork the project and fix a bunch of dependency issues, that probably are already out of date.</p>

<h2 id="enter-the-piless-brewpi">Enter the PiLess BrewPi</h2>
<p>So, theres another implementation of the BrewPi software out there, called <a href="https://github.com/vitotai/BrewPiLess">BrewPiLess</a>.  And the best part is, it doesn’t need a Raspberry Pi, or even an Arduino Controller!  And the project is actively developed, which means new features, and bug fixes.  One of the really great features the BrewPiLess has, is that it supports logging data to <a href="https://brewfather.com">BrewFather</a>.  There you can attach the device to a batch, and keep track of the temperature as the batch is fermenting, and all the data is stored in one place.</p>

<p>I was able to get this up and running, oh, I’d say about 10x faster then I got the BrewPi up.  However, if you read my last blog on makeing a BrewPi, I housed everything in an outdoor sprinkler control box, it was huge and there where power cords and temperature probes hanging all over the place.  Well this time, I wanted something fully modular, where all the cords where removable, and much much smaller.  As small as absolutely possible.  I reached my goal, but if you want your <em>BPL</em> exactly the same as mine, you will need to solder some connections in this build, and have access to a 3D Printer for the enclosure.  These are not show stoppers, there is plenty of other ways to put everything together, this is just <em>my way</em> based on the things I regretted doing when I built my BrewPi, and features I wanted in this build.
<img src="/images/2019-05-01-piless-brewpi/complete.jpg" alt="Complete" /></p>

<h2 id="shopping-list">Shopping List</h2>
<p><em>Most of this stuff comes in bulk, so find a buddy that wants one too, and split the cost!</em></p>
<ul>
  <li><a href="https://www.amazon.com/dp/B01IK9GEQG/ref=cm_sw_r_tw_dp_U_x_WnTcDb2X2FXPF">ESP8266 NodeMCU</a> (you don’t need two of these, but at that price, might as well, the second one is almost free)</li>
  <li><a href="https://www.amazon.com/dp/B01MUATVXX/ref=cm_sw_r_tw_dp_U_x_DoTcDb4Y1JCNS">Two Channel Relay Module</a></li>
  <li><a href="https://www.amazon.com/dp/B01GPUMP9C/ref=cm_sw_r_tw_dp_U_x_YoTcDbT2EFX3H">20x4 LCD Module</a> (this is optional if you would like a display on the controller)</li>
  <li><a href="https://www.amazon.com/dp/B07CBS768L/ref=cm_sw_r_tw_dp_U_x_jpTcDbF87A192">AC-&gt;DC 5V PSU</a> (this acts a power supply unit inside the enclosure, powering all the componets, else you can power things with USB bricks, but that sounds like a mess)</li>
  <li><a href="https://www.amazon.com/dp/B014EJY0JE/ref=cm_sw_r_tw_dp_U_x_aqTcDbWWS21YC">Mini XLR Male connectors (2 needed)</a> (these are optional allowing for the temperature probes to be disconnected from the enclosure)</li>
  <li><a href="https://www.amazon.com/dp/B01J33CF48/ref=cm_sw_r_tw_dp_U_x_DqTcDb4HBH9JT">Mini XLR Female connectors (2 needed)</a> (these are optional allowing for the temperature probes to be disconnected from the enclosure)</li>
  <li><a href="https://www.amazon.com/dp/B01M3URWIT/ref=cm_sw_r_tw_dp_U_x_vrTcDb8AKMAJF">AC 3-Pin Outlets (2 needed)</a></li>
  <li><a href="https://www.amazon.com/dp/B00X73S52M/ref=cm_sw_r_tw_dp_U_x_TrTcDb1W0WM52">3-Position Screw Terminal</a></li>
  <li><a href="https://www.amazon.com/dp/B00NWO68JI/ref=cm_sw_r_tw_dp_U_x_csTcDbKZ6CYAG">AC Rocker Switch</a></li>
  <li><a href="https://www.amazon.com/dp/B00EU70ZL8/ref=cm_sw_r_tw_dp_U_x_BsTcDbMZ0JG19">DS18B20 Temperature Probes (2 needed)</a></li>
  <li><a href="https://www.amazon.com/dp/B0185FC5OK/ref=cm_sw_em_r_mt_dp_U_6sTcDb4JWZDCA">4.7k Resistor</a> (only 1 is needed, but good luck finding just 1 for sale)</li>
  <li><a href="https://www.amazon.com/dp/B077X7MKHN/ref=cm_sw_r_tw_dp_U_x_VtTcDbCVHGJZA">Breadboard Jumpers</a> (really only need female jumpers for this project)</li>
  <li>Misc screws, wire, shrink tube, and wire nuts/connectors</li>
</ul>

<h2 id="pro-tip">Pro Tip</h2>
<p>I am going to suggest starting this project by printing the enclosure.  I am going to suggest this for a few reasons, first of all, most the customization I used in my build are only really needed if you are going to use my enclosure design.  Things like the plugs, XLR connections, AC Rocker Switch and the LCD are all going to work perfect in my enclosure,  Second, it takes a bit to print, and well, everything mounts in the enclosure, so you’re going to kinda need that part right away.  If you’re not going to use my design, you can probably skip this part, and just mock everything up so you can figure out how your going to house this contraption.</p>

<p>The enclosure I designed is available on <a href="https://www.thingiverse.com/thing:3042974">Thingiverse</a>.  It is one of the first things I’ve designed, so I’m sure there are things that <em>could be done better</em> but it works well enough for what it is.  I’m not going to go into print settings for this as its out of the scope of this walk through.  So, if you’re going this route, download the stl and get it printing because it will take a bit, you can print the lid while you are assembling the rest of the BPL.</p>

<h2 id="time-to-make-the-chimi-fing-changas">Time to make the chimi-f***ing-changas</h2>
<p>So, the first thing I want to say about this system, is that its dealing with 110v AC power, you will be running that power to the AC-&gt;DC converter (the NodeMCU and LCD run on DC power), and to the relay module, which essentially turns on/off your power outlets, which will control your Heating and Cooling in your fermentation chamber.  I cannot over stress this enough, <strong>IF YOU ARE NOT COMFORTABLE WORKING WITH ELECTRICITY OR DON’T KNOW HOW BASIC ELECTRICAL WIRING WORKS, STOP WHAT YOU ARE DOING, PUT YOUR TOOLS DOWN, AND FIND SOMEONE WHO DOES</strong>!  Ok, with that being said, lets get down to business.</p>

<h3 id="install-the-brewpiless-bin-on-the-esp8266-nodemcu">Install the BrewPiLess bin on the ESP8266 NodeMCU</h3>
<ol>
  <li>Download the BrewPiLess Repository:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">git clone https://github.com/vitotai/BrewPiLess.git</code></li>
    </ul>
  </li>
  <li>If you don’t have it installed, you will need to download and install <a href="https://code.visualstudio.com">VSCode</a>.</li>
  <li>Open the repository in VSCode.  If you don’t have <a href="https://platformio.org/install/ide?install=vscode">Platform.io</a> installed, go to the extensions workspace and install it.
    <ul>
      <li>On my mac, it failed to install the first, and it was because <code class="language-plaintext highlighter-rouge">virtualenv</code> needed to be installed.  Completing the three steps listed in the <em>Perquisites</em> section <a href="http://docs.platformio.org/en/latest/installation.html#virtual-environment">here</a>, and then uninstall/reinstall the extension fixed the issue.</li>
    </ul>
  </li>
  <li>Connect the NodeMCU to your computer via USB, and flash the bin to the board (make sure you are in the working directory of the repo):
    <ul>
      <li><code class="language-plaintext highlighter-rouge">command+shit+p</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&gt;PlatformIO: Build</code></li>
          <li><code class="language-plaintext highlighter-rouge">&gt;PlatformIO: Upload</code></li>
          <li><code class="language-plaintext highlighter-rouge">&gt;PlatformIO: Clean</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>After the flash is complete, the NodeMCU will begin broadcasting its own SSID, you need to connect to to this WiFi network to configure it to connect to your home WiFi.
    <ul>
      <li>Username: <code class="language-plaintext highlighter-rouge">brewpiless</code></li>
      <li>Password: <code class="language-plaintext highlighter-rouge">brewpiless</code></li>
      <li>Open a browser it should auto connect to a config page, where you can change the username, password, and the title.</li>
      <li>Save the changes and on the next page enter you home wireless info.</li>
      <li>After this is complete you can connect back to your home wifi.</li>
    </ul>
  </li>
</ol>

<h3 id="soldering">Soldering</h3>
<p>There are a few things to solder, and some need to be done before assembly:</p>
<ol>
  <li>Solder your wires to the AC-&gt;DC 5V PSU, you won’t be able to do this after its in the enclosure.
    <ul>
      <li>On the <strong>POWER IN</strong> side, you need 14-16 AWG wire, basically the same wire thats in the walls of your house, I clipped an old Molex computer cable and stole wire from that.  This wire needs to be heavier gauge because it will have the 110v that is coming from your house to it, then will convert that to 5v DC.</li>
      <li>On the <strong>POWER OUT</strong> side, you need <strong>THREE</strong> Hot and Ground leads.  These will power the NodeMCU, LCD and Relay.  Just clip one end of the breadboard jumper wires for this.</li>
      <li>you can either solder the wire right to the board, or there is screw terminals that you could get as well, that you would solder to the board, and then you can screw the wires into the terminals, the choice is yours.</li>
    </ul>
  </li>
  <li>The temperature probes need to be soldered to the female XLR connectors, the wire to pin layout don’t matter really, just as long as you do both of them the same.
    <ul>
      <li>Unscrew the connector, put the plastic housing over the temperature probe wire, and solder the three wires from the probe to the three pin cups on the connector.</li>
      <li>Repeat this step for the other temperature probe.</li>
      <li>One thing I did was cut one probe a bit shorter then the other, for two reasons. First, the probe to monitor the fridge temperature didn’t need to be 6’ long.  Second, it makes it easier for me to keep track of which probe is for the chamber temperature and which is for the beer temperature.</li>
    </ul>
  </li>
  <li>While you have your solder gear out, might as well solder the wires to the male fittings as well.
    <ul>
      <li>Sacrifice a few jumper wires for this, I would recommend using the same colors as the wires that where in the temperature probes so you can keep every thing lined up. The connectors are keyed so they can only go together one way.</li>
      <li>leave about 2-3 inches (cut a jumper in half) of wire, these will connect to the three position screw terminal that is directly behind the connectors in the enclosure (see the <em>layout</em> image below).</li>
      <li>Solder the wires to the pin cups, again, be sure your wire colors match up, your basically just making a pass thru connection in the enclosure, that is detachable if need be.</li>
    </ul>
  </li>
</ol>

<h3 id="assembly">Assembly</h3>
<p>Wiring diagram:
<img src="/images/2019-05-01-piless-brewpi/wiring.jpg" alt="Wiring" />
Layout diagram (I wasn’t able to find a 3D model of the AC-DC 5V PSU, that goes in with the Power IN facing way from the the LCD in the big empty space):
<img src="/images/2019-05-01-piless-brewpi/layout.png" alt="Layout" /></p>
<ol>
  <li>At this point, you can start putting all the pieces in the enclosure.
    <ul>
      <li>Place each board on its mounting posts, I used old computer motherboard screws to hold them down.</li>
      <li>The three position screw terminal I glued to the post.</li>
    </ul>
  </li>
  <li>Use the diagram above to connect all the jumpers.
    <ul>
      <li>The power for the NodeMCU will be supplied from the AC-&gt;DC 5V PSU to the 5V pin on the board.</li>
      <li>Connect a ground lead from the AC-&gt;DC 5V PSU to any ground on the NodeMCU board.</li>
      <li>In the diagram it shows the 5V pin is used to power the relay module, but that is assuming the NodeMCU is being powered VIA the USB port.  Which is not the case, the 5V (maybe also labeled ‘Vin’) pin on the board will be used to power the NodeMCU itself, and then you can use one of the 3 power leads from the AC-&gt;DC 5V PSU to power the relay module.</li>
      <li>Be sure to add the resistor in the three position screw terminal when wiring in the temperature probes.</li>
    </ul>
  </li>
  <li>Next wire in the power switch and the outlets.
    <ul>
      <li>AC Rocker switch wiring digram:
 <img src="/images/2019-05-01-piless-brewpi/switch_wiring.jpg" alt="Switch Wiring" /></li>
      <li>From the power switch you will have three leads, 1 to the AC-&gt;DC 5V PSU, and 1 for each outlet. I used lever action wire nuts for this connection because there is 4 14AWG wires connecting at this point.</li>
      <li>The Relay acts as a switch to complete the circuit, so the hot goes in, and the back out to outlet, and the naturel goes directly to the outlet.</li>
    </ul>
  </li>
</ol>

<p>There really isn’t much more I can say about the wiring of this, all the information needed is in the diagram, there is more then one way to skin a cat, so just make sure your wiring is following the diagram and you’ll be fine.  One thing to note, my fridge that I have plugged in the cooling outlet must draw a lot of amps, because the power switch comes with a 5 amp fuse, and when it turned on it, blew that, I had to replace it with a 10 amp fuse.
<img src="/images/2019-05-01-piless-brewpi/front_wiring.jpg" alt="Front Wiring" />
<img src="/images/2019-05-01-piless-brewpi/rear_wiring.jpg" alt="Rear Wiring" /></p>

<h2 id="brewpiless-configuration">BrewPiLess Configuration</h2>
<p>Once everything is up an running, there isn’t much left to do.  Just need to set which plug is the hot and cold, and which probes are the chamber, and the beer.</p>
<ol>
  <li>Connect to your BrewPiLess via a web browser at http://brewpiless.local (or whatever you named it in the setup screen.)</li>
  <li>Go to the <code class="language-plaintext highlighter-rouge">Device Setup</code> screen on the top right corner.
    <ul>
      <li>Be sure to click the <code class="language-plaintext highlighter-rouge">Erase EEPROM</code> button at the top to be sure everything is reset.</li>
      <li>Click <code class="language-plaintext highlighter-rouge">Refresh Device List</code> on the top load all your devices.</li>
      <li>You have to manually select a <code class="language-plaintext highlighter-rouge">Device</code> slot for each probe and plug, but these are arbitrary, they just have to be unique.</li>
      <li>The temperature probes will have an <code class="language-plaintext highlighter-rouge">Address</code> value.</li>
      <li>Setup 4 devices:
        <ul>
          <li>Chamber Temp</li>
          <li>Beer Temp</li>
          <li>Chamber Heater</li>
          <li>Chamber Cooler</li>
        </ul>
      </li>
      <li>I am not sure if there is a better way to then trial and error to identify which is which, for the probes you can just hold in your hand and the value will change on the display.  For the plugs you will need to actually set a <code class="language-plaintext highlighter-rouge">Beer</code> or <code class="language-plaintext highlighter-rouge">Fridge</code> temperature value and then one or the other will turn on.</li>
    </ul>
  </li>
  <li>Once your get everything setup, I would recommend backing up the configuration from the <code class="language-plaintext highlighter-rouge">Device Setup</code> screen incase you ever need to reload or rebuild, then you won’t have to play the guessing game on which device is which.</li>
</ol>

<h2 id="extra-credit">Extra Credit</h2>
<p>If your like me, you are going to want to change the temperature units from C to F, because the NodeMCU has such little amount of space, there is no room for webpages to handle customization.  Instead, you do it with commands:</p>
<ol>
  <li>Navigate to http://brewpiless.local/testcmd.htm</li>
  <li>Issue this command:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">j{"tempFormat":"F"}</code></li>
    </ul>
  </li>
  <li>If your getting in the Kveik craze, and want to ferment hot AF, the you need to increase the <code class="language-plaintext highlighter-rouge">tempSetMax</code> value:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">j{"tempSetMax":"90.0"}</code></li>
    </ul>
  </li>
</ol>

<p>There is plenty of customizing you can do, just check out the BrewPiLess wiki: https://github.com/vitotai/BrewPiLess/wiki</p>

<h2 id="time-for-a-cold-one">Time for a Cold One</h2>
<p>Whew, you did it!  Nice work!  Go pour yourself a cold one, I know I’m going too, sorry if I missed anything, this was a pretty intense walk through.  Cheers!</p>]]></content><author><name></name></author><category term="homebrewing" /><category term="homebrewing" /><category term="raspberrypi" /><category term="3dprinting" /><summary type="html"><![CDATA[Building a BrewPi without a Raspberry Pi using the BrewPiLess implementation.]]></summary></entry><entry><title type="html">Taplist Pi Zero</title><link href="http://0.0.0.0:4000/taplist-pi-zero/" rel="alternate" type="text/html" title="Taplist Pi Zero" /><published>2019-04-26T00:00:00+00:00</published><updated>2019-04-26T00:00:00+00:00</updated><id>http://0.0.0.0:4000/taplist-pi-zero</id><content type="html" xml:base="http://0.0.0.0:4000/taplist-pi-zero/"><![CDATA[<p>So, if in your homebrew life, you’ve moved on past bottling (because its it f***ing terrible) and are kegging your ferments, you’ve probably already come up with some way to label or mark your taps so you know what tap is pouring what beverage.  I know there is <em>a lot</em> of articles out there on this topic, but, I wanted to share my experience on the matter, and hopefully, it can save you some time, and money.</p>

<p>As you can probably tell, I’m a bit of a tech nerd, so obviously I wanted digital signage.  I mean there is several options out there to do this manually.  Tap handles with black board surfaces you can write on with chalk, or even black board spray paint, you could paint on your kegerator or keezer.  Or maybe make some other type of labels that hang on the taps or whatever.  But I didn’t want anything like that, I wanted an actual taplist.  One of the main reasons this was even remotely cost feasible for me, is I had an extra 22” LCD monitor laying around.  If you have to buy a monitor to pull this off, then this walk through probably isn’t for you, but if not here is a list of things you’ll need:</p>

<ul>
  <li><a href="https://www.amazon.com/dp/B01L3IU6XS/ref=cm_sw_em_r_mt_dp_U_ThTcDbZMH9BZH">Raspberry Pi Zero</a></li>
  <li><a href="https://www.amazon.com/dp/B0012Y2LLE/ref=cm_sw_r_tw_dp_U_x_pkTcDbVDX8D6S">MicroSD Card (8GB minimum)</a></li>
  <li><a href="https://www.amazon.com/dp/B00GF9T3I0/ref=cm_sw_r_tw_dp_U_x_ilTcDbRG7EJBP">1.2A Minimum Power Supply (basically any old cell phone charger)</a></li>
  <li><a href="https://www.amazon.com/dp/B01KRKO4MM/ref=cm_sw_r_tw_dp_U_x_LlTcDbCGQ2E0G">HDMI Cable (mini HDMI to what ever interface is on the display)</a></li>
  <li><a href="https://www.amazon.com/dp/B01HP636I4/ref=cm_sw_r_tw_dp_U_x_amTcDb197F49S">Raspberry Pi Zero Case (optional, you could also 3D print this too)</a></li>
</ul>

<p>The first time I did this, I used a Raspberry Pi 3, which is probably over kill for hardware to make a taplist, especially when all we are going to do is display a web page.  A few months ago, I need a Raspberry Pi for another project, and when I looked to buy one, they are like $30, however, at the time, I found a Raspberry Pi Zero for $5 <em>(at the time of this writing it is ~$15)</em>.  It doesn’t have near the hardware resources, but again, we are just going to be displaying a webpage.  <em>(Also, with taplist.io, you can use a kindle fire stick, I haven’t ever set it up with that, but I do know that there instructions on the product page on how to set one up.)</em>  So, lets get started.</p>

<h2 id="taplistio">taplist.io</h2>
<p>The premise of this digital taplist, uses a free product (for personal use) called <a href="https://taplist.io">Taplist.io</a>.  You will need to create an account, and from there, you can create taps, build your beverage database, create kegs, attach kegs to taps.  I’m not going to go into very much detail on this part because there is so many variables, and so much customization you can do with it.  what ever you customize under the “Look And Feel” section of your dashboard, is what will be displayed on the final product when you are finished.  The other nice part is you get an online taplist you can share with anyone (you can find mine at the bottom of this page, by clicking the “beer mug” icon).</p>

<h2 id="setting-up-the-raspberry-pi-zero">Setting up the Raspberry Pi Zero</h2>
<p>For the first part of this build, we need to install and configure the Raspberry Pi Zero, we will be installing the latest version of <a href="https://www.raspbian.org">Raspbian Stretch Lite</a>.</p>
<ol>
  <li>Download the latest img for <strong>Raspbian Stretch Lite</strong> <a href="https://www.raspberrypi.org/downloads/raspbian/">here</a>.</li>
  <li>Open the <code class="language-plaintext highlighter-rouge">Disk Utility</code> app:
    <ul>
      <li>Press <code class="language-plaintext highlighter-rouge">CMD+SPACE</code> to open the <code class="language-plaintext highlighter-rouge">Spotlight</code> application.</li>
      <li>In the search bar type <code class="language-plaintext highlighter-rouge">Disk Utility</code>.</li>
    </ul>
  </li>
  <li>In the top left had corner, select <code class="language-plaintext highlighter-rouge">View</code>, and be sure <code class="language-plaintext highlighter-rouge">Show All Devices</code> is selected.</li>
  <li>Next, you will need to be sure the SD card is formated with the <a href="https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system">FAT</a> file system.
    <ul>
      <li>Select the SD drive in the left pane.</li>
      <li>Select <code class="language-plaintext highlighter-rouge">Erase</code> from the top.</li>
      <li>Make sure you pick <code class="language-plaintext highlighter-rouge">FAT (MS-DOS)</code> for the file system, and <code class="language-plaintext highlighter-rouge">MBR (Master Boot Record)</code> for the partition.</li>
      <li><strong>THIS WILL ERASE THE ENTIRE SD CARD, SO BE SURE YOU HAVE SAVED ANYTHING YOU WANT TO EVER SEE AGAIN!</strong></li>
    </ul>
  </li>
  <li>Open a <code class="language-plaintext highlighter-rouge">terminal</code> using the <code class="language-plaintext highlighter-rouge">Spotlight</code> tool (see step 2) and type <code class="language-plaintext highlighter-rouge">Terminal</code>.</li>
  <li>In the <code class="language-plaintext highlighter-rouge">terminal</code> application, find your disk number by running <code class="language-plaintext highlighter-rouge">diskutil list</code></li>
  <li>Note your disk number, it will be in the format of <code class="language-plaintext highlighter-rouge">/dev/disk2</code>, it may not actually be the number <code class="language-plaintext highlighter-rouge">2</code>, just look at the size of the disk and make sure its the correct one.</li>
  <li>Unmount the disk with <code class="language-plaintext highlighter-rouge">diskutil unmountDisk /dev/disk2</code>, again, replace <code class="language-plaintext highlighter-rouge">2</code> with number of your SD card.</li>
  <li>write the image to the SD Card with <code class="language-plaintext highlighter-rouge">dd</code>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudo dd bs=1m if=Downloads/raspbian-stretch-lite.img of=/dev/rdisk4 conv=sync</code></li>
      <li>Replace <code class="language-plaintext highlighter-rouge">Downloads/raspbian-stretch-lite.img</code> with the path to the <code class="language-plaintext highlighter-rouge">.img</code> file you downloaded in step 1.</li>
      <li>Again, replace <code class="language-plaintext highlighter-rouge">rdisk4</code> with the disk number you found in step 7.</li>
      <li>This may take some time, took my system about 10 minutes on an 8GB SD Card with a Thunderbolt SD Card Reader.</li>
    </ul>
  </li>
</ol>

<h2 id="configuring-raspbian-lite-stretch">Configuring Raspbian Lite Stretch</h2>
<p>After the img is done writing to the SD card, its time to being configuring Raspbian.  Because the Raspberry Pi Zero has such little hardware, we are going to try to keep this as minimal as possible.</p>
<ol>
  <li>SSH is disabled by default, so to enable it, you need to create an empty file called <code class="language-plaintext highlighter-rouge">ssh</code>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">touch /Volumes/boot/ssh</code></li>
    </ul>
  </li>
  <li>Next, you need to append <code class="language-plaintext highlighter-rouge">dtoverlay=dwc2</code> to the end of <code class="language-plaintext highlighter-rouge">/Volumes/boot/config.txt</code>.  You can do this either with <code class="language-plaintext highlighter-rouge">textEdit</code> or with a terminal editor.</li>
  <li>This next step is a little tricky, first open <code class="language-plaintext highlighter-rouge">/Volumes/boot/cmdline.txt</code>, and located the text <code class="language-plaintext highlighter-rouge">rootwait</code>, immediately after that, add a space, and then this text: <code class="language-plaintext highlighter-rouge">modules-load=dwc2,g_ether</code>.  So it should look like this:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">rootwait modules-load=dwc2,g_ether</code></li>
    </ul>
  </li>
  <li>Now go ahead and eject the SD card and then load it into the Raspberry Pi Zero and plug in the power.  It will take about 60 seconds to boot up, then connect it to your computer.</li>
  <li>Next, go to <code class="language-plaintext highlighter-rouge">System Preferences &gt; Network</code> and you will see a new device called <code class="language-plaintext highlighter-rouge">RNDIS/Ethernet Gadget</code>.  <img src="/images/2019-04-26-taplist-pi-zero/network.png" alt="Network" />  This is the Raspberry Pi Zero, you can share your internet connection to it, which will then all you to SSH to the device.</li>
  <li>Go to <code class="language-plaintext highlighter-rouge">System Preferences &gt; Sharing</code> and enable internet sharing for the <code class="language-plaintext highlighter-rouge">RNDIS/Ethernet Gadget</code>. <img src="/images/2019-04-26-taplist-pi-zero/sharing.png" alt="Sharing" /></li>
  <li>You should now beable to <code class="language-plaintext highlighter-rouge">ssh</code> to the Raspberry Pi Zero:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ssh pi@raspberrypi.local</code></li>
      <li>Default password is <code class="language-plaintext highlighter-rouge">raspberry</code>.</li>
      <li>Type <code class="language-plaintext highlighter-rouge">yes</code> to accept the certificate thumbprint.</li>
    </ul>
  </li>
  <li>After you are connected, there are a few things that need to be set, run <code class="language-plaintext highlighter-rouge">raspi-config</code> and update the following:
    <ul>
      <li><strong>CHANGE THE DEFAULT PASSWORD</strong> else anyone can now <code class="language-plaintext highlighter-rouge">ssh</code> to your taplist board with the default credentials!</li>
      <li>Under <code class="language-plaintext highlighter-rouge">Boot Options</code> select <code class="language-plaintext highlighter-rouge">Desktop/CLI</code> and then select <code class="language-plaintext highlighter-rouge">Console Autologin</code>.</li>
      <li>Lastly configure the wifi.</li>
    </ul>
  </li>
  <li>You are now connected to your wifi, and can update the system:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudo apt-get update -y</code></li>
      <li><code class="language-plaintext highlighter-rouge">sudo apt-get upgrade -y</code></li>
      <li><code class="language-plaintext highlighter-rouge">sudo apt-get dist-upgrade -y</code></li>
    </ul>
  </li>
  <li>Now, install the minimum X Server Environment for Chromium:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudo apt-get install --no-install-recommends xserver-xorg x11-xserver-utils xinit openbox</code></li>
      <li><code class="language-plaintext highlighter-rouge">sudo apt-get install --no-install-recommends chromium-browser</code></li>
    </ul>
  </li>
  <li>You need to configure the auto start commands, and to do this, you will have to use a terminal based editor, like <code class="language-plaintext highlighter-rouge">nano</code> or <code class="language-plaintext highlighter-rouge">vi</code>.  I prefer <code class="language-plaintext highlighter-rouge">nano</code>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudo nano /etc/xdg/openbox/autostart</code></li>
    </ul>
  </li>
  <li>
    <p>Replace the entire contents of the file with this:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Disable any form of screen saver / screen blanking / power management
xset s off
xset s noblank
xset -dpms

# Allow quitting the X server with CTRL-ATL-Backspace
setxkbmap -option terminate:ctrl_alt_bksp

# Start Chromium in kiosk mode
sed -i 's/"exited_cleanly":false/"exited_cleanly":true/' ~/.config/chromium/'Local State'
sed -i 's/"exited_cleanly":false/"exited_cleanly":true/; s/"exit_type":"[^"]\+"/"exit_type":"Normal"/' ~/.config/chromium/Default/Preferences
chromium-browser --disable-infobars --kiosk 'https://www.taplist.io/display'
</code></pre></div>    </div>
  </li>
  <li>You need to configure X Server to autostart and boot and load the display web page.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nano ~/.bash_profile</code></li>
      <li>Add this to the file: <code class="language-plaintext highlighter-rouge">[[ -z $DISPLAY &amp;&amp; $XDG_VTNR -eq 1 ]] &amp;&amp; startx -- -nocursor</code></li>
      <li>Save and close the file.</li>
    </ul>
  </li>
  <li>Lastly shut you Raspberry Pi Zero down <code class="language-plaintext highlighter-rouge">sudo shutdown now</code> and go attach it to your monitor.  You do not need to attach any peripherals, on its next boot, it will autologin as the <code class="language-plaintext highlighter-rouge">Pi</code> user, and start up <code class="language-plaintext highlighter-rouge">Chromium</code> and navigate to https://www.taplist.io/display.  The very first time this boots, there will be a code on the screen that you need to go to https://taplist.io/activate and enter in.</li>
</ol>

<p>WHEW!  Thats it, hopefully you made it this far, and ended up with something like this <img src="/images/2019-04-26-taplist-pi-zero/taplist.jpg" alt="Taplist" /></p>

<p>Cheers!</p>

<hr />

<h2 id="sources">Sources</h2>
<ul>
  <li>https://brandonb.ca/raspberry-pi-zero-w-headless-setup-on-macos</li>
  <li>https://bdking71.wordpress.com/2018/11/06/setup-an-information-kiosk-using-a-raspberry-pi-zero-w/</li>
  <li>https://taplist.io/help/raspberry-pi-setup</li>
</ul>]]></content><author><name></name></author><category term="homebrewing" /><category term="homebrewing" /><category term="raspberrypi" /><category term="keezer" /><summary type="html"><![CDATA[A walk through for creating a digital taplist with Taplist.io and Raspberry Pi Zero.]]></summary></entry></feed>